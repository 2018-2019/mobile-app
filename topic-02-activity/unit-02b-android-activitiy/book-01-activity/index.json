


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-01b Activities",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Layout the PlacemarkActivity - supporting create/edit of placemarks</p>",
  "folder" : "book-01-activity",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-01b Activities",
    "contentMd" : "# Objectives\n\nLayout the PlacemarkActivity - supporting create/edit of placemarks"
    },
  
    {
    "title": "# Style & String Resources",
    "shortTitle": "01",
    "contentMd" : "# Style & String Resources\n\nWe will continue working on the app we created in the previous lab.  Should you need it, the archive of the lab is here:\n\n- [placemark-00.zip](archives/placemark-00.zip)\n\nBefore proceeding to introduce new features into our app - we will augment some of the libraries:\n\n\n## build.gradle (Mobile:app)\n~~~\n...\n  implementation 'com.android.support:design:28.0.0'\n...\n~~~\n\nMake sure you include the above in the correct build.gradle file (there are two). Append it to the other `implementation` entries. When you make the above change you will be invited to `sync` the project again - do this now.\n\nThis is an additional library to support android components and layouts not included in the base SDK:\n\n- <https://developer.android.com/training/material/design-library.html>\n\nAlso, change our theme:\n\n## styles.xml\n\n~~~\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n~~~\n\nThis replaces the 'DarkActionBar' theme in the generated style.  This image will give you an idea of some popular AppThemes:\n\n![](img/19.png)\n\nNow change the colours:\n\n## colours.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <!-- colour for the app bar and other primary UI elements -->\n    <color name=\"colorPrimary\">#FFFFFF</color>\n    <!-- a darker variant of the primary colour, used for this\n         like status bars and other app bars.  -->\n    <color name=\"colorPrimaryDark\">#000000</color>\n    <!-- a secondary colour for controls like checkboxes\n         and text fields.  -->\n    <color name=\"colorAccent\">#4c90af</color>\n</resources>\n~~~\n\nOr choose other colours as you please...\n\n\nWe also need a new string for the button, which we will introduce in the next step:\n\n## strings.xml\n\n~~~\n  <string name=\"button_addPlacemark\">Add Placemark</string>\n~~~\n\n"
    },
  
    {
    "title": "# Layouts",
    "shortTitle": "02",
    "contentMd" : "# Layouts\n\nWorking with `activity_placemark.xml`, progressively introduce the following versions - replacing each with the successive content below. Keep an eye on the `design` view as you progress to notice the changes\n\n![](img/12.png)\n\n## activity_placemark.xml Version A\n\nThis is what you currently have (select the `Text` view to reveal this):\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"org.wit.placemark.PlacemarkActivity\">\n\n  <TextView\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:text=\"Hello World!\"\n      app:layout_constraintBottom_toBottomOf=\"parent\"\n      app:layout_constraintLeft_toLeftOf=\"parent\"\n      app:layout_constraintRight_toRightOf=\"parent\"\n      app:layout_constraintTop_toTopOf=\"parent\"/>\n\n</android.support.constraint.ConstraintLayout>\n~~~\n\n## activity_placemark.xml Version B \n\nNow make the following change  ... replace the current contents to include relative layout + toolbar\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"org.wit.placemark.PlacemarkActivity\">\n\n  <RelativeLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\">\n\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appBarLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"@color/colorAccent\"\n        android:fitsSystemWindows=\"true\"\n        app:elevation=\"0dip\"\n        app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n      <android.support.v7.widget.Toolbar\n          android:id=\"@+id/toolbarAdd\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          app:titleTextColor=\"@color/colorPrimary\"/>\n    </android.support.design.widget.AppBarLayout>\n\n  </RelativeLayout>\n</android.support.constraint.ConstraintLayout>\n~~~\n\nKeep an eye on the Design view as you make the next change...you will see the *Component Tree* growing. \n\n\n## activity_placemark.xml Version C \n\n... augment with a scroll view containing a linear layout:\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"org.wit.placemark.PlacemarkActivity\">\n\n  <RelativeLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\">\n\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appBarLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"@color/colorAccent\"\n        android:fitsSystemWindows=\"true\"\n        app:elevation=\"0dip\"\n        app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n      <android.support.v7.widget.Toolbar\n          android:id=\"@+id/toolbarAdd\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          app:titleTextColor=\"@color/colorPrimary\"/>\n    </android.support.design.widget.AppBarLayout>\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_below=\"@id/appBarLayout\"\n        android:fillViewport=\"true\">\n\n      <LinearLayout\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          android:orientation=\"vertical\">\n\n      </LinearLayout>\n    </ScrollView>\n\n  </RelativeLayout>\n</android.support.constraint.ConstraintLayout>\n~~~\n\nKeep an eye on the Design view as you make the next change...you will see the app design visibly changing.\n\n\n## activity_placemark.xml Version D \n\n... scroll view linear layout contains a text edit field:\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"org.wit.placemark.PlacemarkActivity\">\n\n  <RelativeLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\">\n\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appBarLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"@color/colorAccent\"\n        android:fitsSystemWindows=\"true\"\n        app:elevation=\"0dip\"\n        app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n      <android.support.v7.widget.Toolbar\n          android:id=\"@+id/toolbarAdd\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          app:titleTextColor=\"@color/colorPrimary\"/>\n    </android.support.design.widget.AppBarLayout>\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_below=\"@id/appBarLayout\"\n        android:fillViewport=\"true\">\n\n      <LinearLayout\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          android:orientation=\"vertical\">\n\n        <android.support.design.widget.TextInputEditText\n            android:id=\"@+id/placemarkTitle\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"8dp\"\n            android:hint=\"@string/hint_placemarkTitle\"\n            android:inputType=\"text\"\n            android:maxLength=\"25\"\n            android:maxLines=\"1\"\n            android:padding=\"8dp\"\n            android:textColor=\"@color/colorPrimaryDark\"\n            android:textSize=\"14sp\"/>\n\n      </LinearLayout>\n    </ScrollView>\n\n  </RelativeLayout>\n</android.support.constraint.ConstraintLayout>\n~~~\n\nThe above needs a new string resource:\n\n## strings.xml\n\n~~~\n<resources>\n  <string name=\"app_name\">Placemark</string>\n  <string name=\"button_addPlacemark\">Add Placemark</string>\n  <string name=\"hint_placemarkTitle\">Placemark Title</string>\n</resources>\n~~~\n\n## activity_placemark.xml Version E \n\n... now add a new button in the layout\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:app=\"http://schemas.android.com/apk/res-auto\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\ntools:context=\"org.wit.placemark.PlacemarkActivity\">\n\n<RelativeLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n\n  <android.support.design.widget.AppBarLayout\n      android:id=\"@+id/appBarLayout\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:background=\"@color/colorAccent\"\n      android:fitsSystemWindows=\"true\"\n      app:elevation=\"0dip\"\n      app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n    <android.support.v7.widget.Toolbar\n        android:id=\"@+id/toolbarAdd\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:titleTextColor=\"@color/colorPrimary\"/>\n  </android.support.design.widget.AppBarLayout>\n\n  <ScrollView\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:layout_below=\"@id/appBarLayout\"\n      android:fillViewport=\"true\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\">\n\n      <android.support.design.widget.TextInputEditText\n          android:id=\"@+id/placemarkTitle\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          android:layout_margin=\"8dp\"\n          android:hint=\"@string/hint_placemarkTitle\"\n          android:inputType=\"text\"\n          android:maxLength=\"25\"\n          android:maxLines=\"1\"\n          android:padding=\"8dp\"\n          android:textColor=\"@color/colorPrimaryDark\"\n          android:textSize=\"14sp\"/>\n\n      <Button\n          android:id=\"@+id/btnAdd\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          android:layout_margin=\"16dp\"\n          android:background=\"@color/colorAccent\"\n          android:paddingBottom=\"8dp\"\n          android:paddingTop=\"8dp\"\n          android:stateListAnimator=\"@null\"\n          android:text=\"@string/button_addPlacemark\"\n          android:textColor=\"@color/colorPrimary\"\n          android:textSize=\"16sp\"/>\n    </LinearLayout>\n  </ScrollView>\n\n</RelativeLayout>\n</android.support.constraint.ConstraintLayout>\n~~~\n\n\nBuilding layouts textually like this is a useful skill to acquire over time. Initially, you will probably be most comfortable with drawing the layouts using the design view.\n\nMake sure the application launches now - and the design view is presented in the running app\n\n![](img/09.png)\n\nThis short article on layouts is a useful primer:\n\n- <https://medium.com/google-developers/layouts-attributes-and-you-9e5a4b4fe32c>"
    },
  
    {
    "title": "# Event Handling",
    "shortTitle": "03",
    "contentMd" : "# Event Handling\n\nNow include the following inside the onCreate function:\n\n~~~\n    btnAdd.setOnClickListener() {\n      info(\"add Button Pressed\")\n    }\n~~~\n\nIntroducing this will require additional imports - get used to selecting these as prompted by Studio. On this occasion you will be presented with a choice of imports:\n\n![](img/14.png)\n\nWe need to select the synthetic import.The complete class will look like this:\n\n~~~\npackage org.wit.placemark\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    info(\"Placemark Activity started..\")\n\n    btnAdd.setOnClickListener() {\n      info(\"add Button Pressed\")\n    }\n  }\n}\n~~~\n\nMake sure you can run the app and that you can see the 'add button pressed' log.\n\nRead this short blog post outlining how the above code differers from the traditional java implementation of same.\n\n- <https://antonioleiva.com/lambdas-kotlin-android/>\n\nTry this alternative implementation of the event handler:\n\n~~~\n    btnAdd.setOnClickListener() {\n      val placemarkTitle = placemarkTitle.text.toString()\n      if (placemarkTitle.isNotEmpty()) {\n        info(\"add Button Pressed: $placemarkTitle\")\n      }\n      else {\n        toast (\"Please Enter a title\")\n      }\n    }\n~~~\n\nRun the app and notice the difference:\n\n- when you press the button without entering a title, an Android *toast* message appears\n\n- when you press the button after entering a title, a log message is recorded on the LogCat view.\n\n\nIn the above we are using anko toasts (you probably noticed that you needed to do Alt+Enter to import it into your class):\n\n- <https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Dialogs>\n\n\n##Note on kotlinx import\n\nSometimes Android Studio can't resolve the 'import kotlinx' reference.  If this happens to you, take these steps to resolve the issue:\n\n- Build -> Clean Project\n- Build - > Rebuild Project\n\nThe error should then disappear.\n\n"
    },
  
    {
    "title": "# Refactor",
    "shortTitle": "04",
    "contentMd" : "# Refactor\n\nWe are going to change the application structure such that ActivityPlacemark is in a **new** package called 'org.wit.placemark.activities':\n\n![](img/10.png)\n\nYou should be able to do this from within the Studio Android perspective. You will be using the context menu to ***create the new package*** in the java folder:\n\n![](img/16.png)\n\nand then dragging/dropping the class into this new package. This will automatically trigger refactor step:\n\n![](img/17.png)\n\nOnce this is completed, a number of files will be automatically changed:\n\n- AndroidManifest.xml\n- PlacemarkActivity.kt\n- activity_placemark.xml\n\nSee if you can locate each of the changes...\n\n## Models\n\nCreate a new package called 'models' as shown here:\n\n![](img/11.png)\n\n... and create this new Kotlin class:\n\n## PlacemarkModel\n\n~~~\npackage org.wit.placemark.models\n\ndata class PlacemarkModel(var title: String = \"\")\n~~~\n\nThis is an example of a Kotlin Data class:\n\n- <https://antonioleiva.com/data-classes-kotlin/>\n\nBriefly review the above - this is the official documentation:\n\n- <https://kotlinlang.org/docs/reference/data-classes.html>\n\nHere is a new version of PlacemarkActivity that makes use of this model:\n\n~~~\npackage org.wit.placemark.activities\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.R\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        info(\"add Button Pressed: $placemark\")\n      }\n      else {\n        toast (\"Please Enter a title\")\n      }\n    }\n  }\n}\n~~~\n\nRead it carefully - notice how we are creating a placemark as a class member:\n\n~~~\n  var placemark = PlacemarkModel()\n~~~\n\nand then using it in the event handler:\n\n~~~\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        info(\"add Button Pressed: $placemark\")\n      }\n      else {\n        toast (\"Please Enter a title\")\n      }\n    }\n~~~\n\nRun the app and test clicking the button when you have:\n\n- text entered and \n- no text entered \n\nin the placemark title textbox.  \n\nCheck the LogCat entries. You should have something simiar to this entry, with your title appended in place of *Waterford*:\n\n~~~\n01-25 13:11:02.489 10017-10017/org.wit.placemark I/PlacemarkActivity: add Button Pressed: PlacemarkModel(title=Waterford)\n~~~"
    },
  
    {
    "title": "# Solution",
    "shortTitle": "Exercises",
    "contentMd" : "# Solution\n\nPlacemark application so far:\n\n- [placemark-01.zip](archives/placemark-01.zip)\n\nWhen you open this project, you will need to do a **Build --> Clean Project** and a **Build --> Rebuild Project** before running it on your AVD.  \n\n\n## Exercise 1:\n\nDownload, expand and open in Studio the sample solution above. Run it in the emulator.\n\n\n## Exercise 2:\n\nMake sure you can auto import the correct libraries when you introduce references. As an exercise, delete all of the imports from PlacemarkActivity:\n\n~~~\npackage org.wit.placemark.activities\n\n// deleted imports..\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    info(\"Placemark Activity started..\")\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        info(\"add Button Pressed: $placemarkTitle\")\n      }\n      else {\n        toast (\"Please Enter a title\")\n      }\n    }\n  }\n}\n~~~\n\nNow reintroduce them one-by-one (using IntelliJ supports e.g. Alt+Enter or the LightBulb). Keep a close eye on any choices you make as you do this.\n\n\n## Exercise 3:\n\nCreate an ArrayList of Placemarks in PlacemarkActivity.  Instead of storing the placemark title in a single object, we will now add each new placemark to this list.\n\nLog all placemarks when a new one is entered.\n\nHINT: Here is a simple placemark array declaration + creation:\n\n~~~\n  val placemarks = ArrayList<PlacemarkModel>()\n~~~  \n\nThis is the documentation on lists in general:\n\n- <https://kotlinlang.org/docs/reference/collections.html>\n\nGreater emphasis is placed here on mutability - which we can explore at a later stage.\n\n\n## Exercise 4:\n\nCreate new text field `description` + log when entered. This will require you to:\n\n- and a new field in the layout\n- add a new entry in the strings.xml file\n- expand the model class to store this new field\n- recover the field in the event handler and include in the model objects\n- log the new field when the add button is pressed\n"
    }
  
  ]
  }

